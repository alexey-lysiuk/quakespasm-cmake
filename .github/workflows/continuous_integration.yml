name: CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.target }} - ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        target: ["quakespasm", "quakespasm-spiked", "vkquake", "ironwail"]
        config:
        - {
            name: "Linux Clang",
            os: ubuntu-22.04,
            extra_options: "-DCMAKE_C_COMPILER=clang"
          }
        - {
            name: "Linux GCC",
            os: ubuntu-22.04
          }
        - {
            name: "macOS",
            os: macos-11
          }
        - {
            name: "MSVC 32-bit",
            os: windows-2022,
            extra_options: "-A Win32"
          }
        - {
            name: "MSVC 64-bit",
            os: windows-2022,
            extra_options: "-A x64"
          }

    steps:
    - uses: actions/checkout@v3

    - name: Checkout Source Code
      shell: bash
      run: |
        git submodule update --init -- src/${{ matrix.target }}

    - name: Install Dependencies
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == 'Linux' ]]; then
          sudo apt update && sudo apt install libcurl4-openssl-dev libflac-dev libmikmod-dev libmpg123-dev libopusfile-dev libsdl2-dev libvorbis-dev libvulkan-dev libxmp-dev zlib1g-dev
        elif [[ "${{ runner.os }}" == 'macOS' ]]; then
          brew install flac libmikmod libvorbis libxmp mpg123 opusfile sdl2 vulkan-headers vulkan-loader
        fi

    - name: Configure
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == 'Windows' ]]; then
          # Remove Strawberry Perl from PATH environment variable to avoid usage of libraries it provides
          export PATH=`echo $PATH | tr ":" "\n" | grep -v "Strawberry" | tr "\n" ":"`
        fi
        cmake -B build -DQUAKE_TARGET=${{ matrix.target }} ${{ matrix.config.extra_options }} .

    - name: Build
      shell: bash
      run: |
        export MAKEFLAGS=--keep-going
        cmake --build build --config Release --parallel 3

    - name: List Build Directory
      if: always()
      shell: bash
      run: |
        git status
        ls -lR build
