--- a/Quake/pr_edict.c
+++ b/Quake/pr_edict.c
@@ -646,6 +646,52 @@ static void ED_Count (void)
 }
 
 
+void ED_PrintSecrets(void)
+{
+	if (!sv.active)
+		return;
+
+	int c = 1;
+
+	for (int e = 0; e < sv.num_edicts; ++e)
+	{
+		edict_t *ed = EDICT_NUM(e);
+
+		if (ed->free)
+			continue;
+
+		float minx = 0, miny = 0, minz = 0, maxx = 0, maxy = 0, maxz = 0;
+		const char *classname = NULL;
+
+		for (int f = 1; f < progs->numfielddefs; ++f)
+		{
+			ddef_t *d = &pr_fielddefs[f];
+			const char *name = PR_GetString(d->s_name);
+			void *vp = (char *)&ed->v + d->ofs * 4;
+			int vi = *(int*)vp;
+			float vf = *(float*)vp;
+
+			if (strcmp(name, "classname") == 0)
+				classname = PR_GetString(vi);
+			else if (strcmp(name, "absmin_x") == 0)
+				minx = vf;
+			else if (strcmp(name, "absmin_y") == 0)
+				miny = vf;
+			else if (strcmp(name, "absmin_z") == 0)
+				minz = vf;
+			else if (strcmp(name, "absmax_x") == 0)
+				maxx = vf;
+			else if (strcmp(name, "absmax_y") == 0)
+				maxy = vf;
+			else if (strcmp(name, "absmax_z") == 0)
+				maxz = vf;
+		}
+
+		if (classname && strcmp(classname, "trigger_secret") == 0)
+			Con_SafePrintf("%i: %.0f %.0f %.0f\n", c++, minx + (maxx - minx) / 2.f, miny + (maxy - miny) / 2.f, minz + (maxz - minz) / 2.0);
+	}
+}
+
+
 /*
 ==============================================================================
 
@@ -1159,6 +1205,7 @@ void PR_Init (void)
 	Cmd_AddCommand ("edicts", ED_PrintEdicts);
 	Cmd_AddCommand ("edictcount", ED_Count);
 	Cmd_AddCommand ("profile", PR_Profile_f);
+	Cmd_AddCommand ("secrets", ED_PrintSecrets);
 	Cvar_RegisterVariable (&nomonsters);
 	Cvar_RegisterVariable (&gamecfg);
 	Cvar_RegisterVariable (&scratch1);
